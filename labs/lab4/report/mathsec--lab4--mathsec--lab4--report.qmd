---
# Preamble

## Author
author:
  name: Кармацкий Никита Сергеевич
  degrees: BSc
  orcid: 0000-0002-0877-7063
  email: 1032259402@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: "Лабораторная работа №4"
subtitle: "Вычисление наибольшего общего делителя"
license: "CC BY"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
      % --- Math fonts fallback: prefer plex-math; else unicode-math; else AMS ---
      \makeatletter
      \IfFileExists{plex-math.sty}{%
        \usepackage{plex-math}% IBM Plex Math if available
      }{%
        \IfFileExists{unicode-math.sty}{%
          \usepackage{unicode-math}% Unicode math
          \setmathfont{Latin Modern Math}% default math font
        }{%
          \usepackage{amsmath,amssymb}% classic math fallback
        }%
      }
      \makeatother
      % --- end fallback ---
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

**Цель работы**

Основная цель работы -- изучить и реализовать алгоритмы вычисления наибольшего общего делителя.

**Задачи**

С помощью языка программирования Julia реализовать:
 - Классический и расщиренный алгоритм Евклида.
 - Классический и расширенный бинарный алгоритм Евклида.

# Выполнение лабораторной работы

Классический алгоритм Евклида - это эффективный метод нахождение наибольшего общего делителя (НОД) двух целых чисел aa и bb. Он основан на повторном деление с остатком:  НОД чисел равен НОД остатка от деления большего числа на меньшее и самого меньшего числа. Процесс повторяется, пока остаток не станет нулём, тогда последний ненулевой остаток и есть НОД.


```julia
function nod(a::Int, b::Int)
    if !(b ≤ a && b > 0)
        throw(ArgumentError("Числа a,b не удовлетворяют: 0<b≤a"))
    end
    r0 = a
    r1 = b
    while true
        rem = r0 % r1
        if rem == 0
            return r1
        end
        r0 = r1
        r1 = rem
    end
end
```

Классический бинарный алгоритм Евклида (или алгоритм Штейна) — это оптимизированный способ вычисления НОД, который вместо деления использует операции сдвига и вычитания. Он эффективен на двоичных компьютерах, так как деление заменяется на более быстрые побитовые операции.


```julia
function bin_nod(a::Int, b::Int)
    if !(b ≤ a && b > 0)
        throw(ArgumentError("Числа a,b не удовлетворяют: 0<b≤a"))
    end
    g = 1
    while a % 2 == 0 && b % 2 == 0
        a, b = a ÷ 2, b ÷ 2
        g = 2 * g
    end
    u = a
    v = b
    while u != 0
        while u % 2 == 0
            u = u ÷ 2
        end
        while v % 2 == 0
            v = v ÷ 2
        end
        if u ≥ v
            u = u - v
        else
            v = v - u
        end
    end
    d = g * v
    return d
end
```

Расширенный алгоритм Евклида — модификация классического, которая помимо НОД вычисляет коэффициенты xx и yy в уравнении Безу.

``` julia
function extended_nod(a::Int, b::Int)
    if !(b ≤ a && b > 0)
        throw(ArgumentError("Числа a,b не удовлетворяют: 0<b≤a"))
    end
    
    r0, r1 = a, b
    x0, x1 = 1, 0
    y0, y1 = 0, 1
    
    while true
        rem = r0 % r1
        q = r0 ÷ r1
        if rem == 0
            d = r1
            x = x1
            y = y1
            return (d, x, y)
        else
            r0, r1 = r1, rem
            x0, x1 = x1, x0 - q * x1
            y0, y1 = y1, y0 - q * y1
        end
    end
end
```

Расширенный бинарный алгоритм Евклида расширяет бинарный метод, позволяя также находить коэффициенты уравнения Безу, аналогично расширенному классическому алгоритму, но с использованием битовых операций для повышения производительности.

```julia
function extended_bin_nod(a::Int, b::Int)
    if !(b ≤ a && b > 0)
        throw(ArgumentError("Числа a,b не удовлетворяют: 0<b≤a"))
    end
    
    g = 1
    while a % 2 == 0 && b % 2 == 0
        a, b = a ÷ 2, b ÷ 2
        g = 2 * g
    end
    u, v = a, b
    A, B, C, D = 1, 0, 0, 1
    
    while u != 0
        while u % 2 == 0
            u = u ÷ 2
            if A % 2 == 0 && B % 2 == 0
                A, B = A ÷ 2, B ÷ 2
            else
                A = (A + b) ÷ 2
                B = (B - a) ÷ 2
            end
        end
        while v % 2 == 0
            v = v ÷ 2
            if C % 2 == 0 && D % 2 == 0
                C, D = C ÷ 2, D ÷ 2
            else
                C = (C + b) ÷ 2
                D = (D - a) ÷ 2
            end
        end
        if u ≥ v
            u = u - v
            A = A - C
            B = B - D
        else
            v = v - u
            C = C - A
            D = D - B
        end
    end
    
    d = g * v
    return (d, C, D)
end
```

Тестирование:

```julia
println("НОД классический: ", nod(30, 15))
println("НОД бинарный: ", bin_nod(30, 15))

d, x, y = extended_nod(30, 15)
println("Расширенный НОД: $d, коэффициенты: x=$x, y=$y")

d_bin, x_bin, y_bin = extended_bin_nod(30, 15)
println("Расширенный бинарный НОД: $d_bin, коэффициенты: x=$x_bin, y=$y_bin")
```

В результате тестирования получим следующий результат: 

![Результат работы программы](image/image1.png){#fig-001 width="70%"}

# Заключение

С помощью языка программирования Julia были реализованы:

- классический и расширенный алгоритм Евклида,
- классический и расширенный бинарный алгоритм Евклида.
  
# Список литературы

1. JuliaLang [Электронный ресурс]. 2024 JuliaLang.org contributors. URL: https: //julialang.org/ (дата обращения: 11.10.2024).
2. Julia 1.11 Documentation [Электронный ресурс]. 2024 JuliaLang.org contributors. URL: https://docs.julialang.org/en/v1/ (дата обращения: 11.10.2024).